%\VignetteIndexEntry{Analysis of bead-summary data}
%\VignettePackage{beadarray}
%\VignetteEngine{knitr::knitr}

% To compile this document
% library('knitr'); rm(list=ls()); knit('beadsummary.Rnw')

\documentclass[12pt]{article}
\newcommand{\usecase}{\textit{\textbf{Use Case: }}}

<<knitr, echo=FALSE, results="hide">>=
library("knitr")
opts_chunk$set(tidy=FALSE,dev="png",fig.show="as.is",
               fig.width=10,fig.height=6,
               message=FALSE,eval=TRUE,warning=FALSE,echo=TRUE)
@ 

<<style, eval=TRUE, echo=F, results="asis">>=
BiocStyle::latex()
@
\usepackage{ifthen} 
\usepackage{xcolor,colortbl}
\newboolean{includethis} 
\setboolean{includethis}{true} 
\newcommand{\ifinclude}[1]{\ifthenelse{\boolean{includethis}}{#1}{}} 



\title{Walkthrough: Importing Gene Expression data into R Commander}
\author{Deepak Parashar and Mark Dunning}
\date{\today}
\begin{document}
\maketitle

We will illustrate the steps involved in importing a microarray dataset into R Commander. We shall use the breast cancer dataset referred to as the 'NKI' dataset published in 

van de Vijver MJ, He YD, vanâ€™t Veer LJ, et al. A gene-expression signature as a predictor of survival in breast cancer. NEJM (2002)

The processed data were downloaded from

{\tt http://rock.icr.ac.uk/collaborations/Mackay/centroid.correlations.Eset/}

First we load the expression values. You will see that there is one row for every microarray probe on the array, and one column for each sample. This is a common format for microarray data\\
 
Import the expression values ({\tt NKI295.exprs.txt}) using
{\tt Data} $\rightarrow$ {\tt Import data} $\rightarrow$ {\tt from text file...}

We should also import the clinical variables ({\tt NKI295.pdata.txt}) for future use.\\

If we are interested in a particular gene of interest, we need to extract it from the matrix. In this case we choose ESR1. However, we need to find the corresponding probe ID in order to create the subset; in this case \textbf{18904} The file NKI.fdata.txt can act as a look-up table.

{\tt Data} $\rightarrow$ {\tt Active data set} $\rightarrow$ {\tt Subset active data set}\\

{\tt Subset expression: X == 18904}

We need to 'stack' the data to transform it into the 'long' data format. This means that the gene expression values go down the screen and we can place our clinical variables of interest alongside the expresssion values. This make the statisitcal analysis easier\\

{\tt Data} $\rightarrow$ {\tt Active data set} $\rightarrow$ {\tt Stack active data set}\\


We then merge to attach the clinical variables as columns. It is important to ensure that the order of Samples is the same in both the clinical variables and expression matrix. We can do this merging in Excel, or with the R command.

<<eval=FALSE>>=
MergedData <- merge(StackedData, clinical, by.x=2,by.y=1)
@


We can now proceeed to do exploratory analysis and statistical testing.

\begin{itemize}
\item {Histograms and boxplots of expression against ER status, Grade, Subtype}
\item{Two-sample t-test to see if expression of ESR1 is different between ER positive and ER negative}
\end{itemize}

More advanced analysis is possible with a few R commands. e.g. survival analysis

<<eval=FALSE>>=
library(survival)
 
survData <- Surv(MergedData$survival.death, MergedData$event_death)
group <- MergedData$ER
 
plot(survfit(survData~group))

@


\end{document}